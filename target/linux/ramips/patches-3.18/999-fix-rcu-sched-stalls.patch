--- a/arch/mips/kernel/smp-cmp.c
+++ b/arch/mips/kernel/smp-cmp.c
@@ -43,6 +43,10 @@
 {
 	struct cpuinfo_mips *c __maybe_unused = &current_cpu_data;
 
+	printk("%s:%s[%d]%x\n", __FILE__, __func__, __LINE__, c->core);
+	c->core = (read_c0_ebase() & 0x3ff) >> (fls(smp_num_siblings)-1);
+	printk("%s:%s[%d]%x\n", __FILE__, __func__, __LINE__, c->core);
+
 	/* Assume GIC is present */
 	change_c0_status(ST0_IM, STATUSF_IP3 | STATUSF_IP4 | STATUSF_IP6 |
 				 STATUSF_IP7);
--- a/arch/mips/ralink/mt7621.c
+++ b/arch/mips/ralink/mt7621.c
@@ -20,6 +20,7 @@
 #include <asm/mips-cpc.h>
 #include <asm/mach-ralink/ralink_regs.h>
 #include <asm/mach-ralink/mt7621.h>
+#include <asm/delay.h>
 
 #include <pinmux.h>
 
@@ -164,6 +165,58 @@
 		panic("Failed to remap core resources");
 }
 
+#define LPS_PREC 8
+/*
+*  Re-calibration lpj(loop-per-jiffy).
+*  (derived from kernel/calibrate.c)
+*/
+static int udelay_recal(void)
+{
+	unsigned int i, lpj = 0;
+	unsigned long ticks, loopbit;
+	int lps_precision = LPS_PREC;
+
+	lpj = (1<<12);
+
+	while ((lpj <<= 1) != 0) {
+		/* wait for "start of" clock tick */
+		ticks = jiffies;
+		while (ticks == jiffies)
+			/* nothing */;
+
+		/* Go .. */
+		ticks = jiffies;
+		__delay(lpj);
+		ticks = jiffies - ticks;
+		if (ticks)
+			break;
+	}
+
+	/*
+	 * Do a binary approximation to get lpj set to
+	 * equal one clock (up to lps_precision bits)
+	 */
+	lpj >>= 1;
+	loopbit = lpj;
+	while (lps_precision-- && (loopbit >>= 1)) {
+		lpj |= loopbit;
+		ticks = jiffies;
+		while (ticks == jiffies)
+			/* nothing */;
+		ticks = jiffies;
+		__delay(lpj);
+		if (jiffies != ticks)   /* longer than 1 tick */
+			lpj &= ~loopbit;
+	}
+	printk(KERN_INFO "%d CPUs re-calibrate udelay(lpj = %d)\n", NR_CPUS, lpj);
+
+	for(i=0; i< NR_CPUS; i++)
+		cpu_data[i].udelay_val = lpj;
+
+	return 0;
+}
+device_initcall(udelay_recal);
+
 void prom_soc_init(struct ralink_soc_info *soc_info)
 {
 	void __iomem *sysc = (void __iomem *) KSEG1ADDR(MT7621_SYSC_BASE);
