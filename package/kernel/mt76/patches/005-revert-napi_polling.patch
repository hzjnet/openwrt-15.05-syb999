--- a/mt7603/core.c
+++ b/mt7603/core.c
@@ -35,7 +35,7 @@
 
 	if (intr & MT_INT_TX_DONE_ALL) {
 		mt7603_irq_disable(dev, MT_INT_TX_DONE_ALL);
-		napi_schedule(&dev->mt76.tx_napi);
+		tasklet_schedule(&dev->mt76.tx_tasklet);
 	}
 
 	if (intr & MT_INT_RX_DONE(0)) {
--- a/mt7603/mac.c
+++ b/mt7603/mac.c
@@ -1286,7 +1286,6 @@
 	tasklet_disable(&dev->mt76.pre_tbtt_tasklet);
 	napi_disable(&dev->mt76.napi[0]);
 	napi_disable(&dev->mt76.napi[1]);
-	napi_disable(&dev->mt76.tx_napi);
 
 	mutex_lock(&dev->mt76.mutex);
 
@@ -1331,8 +1330,7 @@
 	mutex_unlock(&dev->mt76.mutex);
 
 	tasklet_enable(&dev->mt76.tx_tasklet);
-	napi_enable(&dev->mt76.tx_napi);
-	napi_schedule(&dev->mt76.tx_napi);
+	tasklet_schedule(&dev->mt76.tx_tasklet);
 
 	tasklet_enable(&dev->mt76.pre_tbtt_tasklet);
 	mt7603_beacon_set_timer(dev, -1, beacon_int);
--- a/mt7603/dma.c
+++ b/mt7603/dma.c
@@ -135,28 +135,20 @@
 	return 0;
 }
 
-static int mt7603_poll_tx(struct napi_struct *napi, int budget)
+static void
+mt7603_tx_tasklet(unsigned long data)
 {
-	struct mt7603_dev *dev;
+	struct mt7603_dev *dev = (struct mt7603_dev *)data;
 	int i;
 
-	dev = container_of(napi, struct mt7603_dev, mt76.tx_napi);
 	dev->tx_dma_check = 0;
 
 	for (i = MT_TXQ_MCU; i >= 0; i--)
 		mt76_queue_tx_cleanup(dev, i, false);
 
-	if (napi_complete_done(napi, 0))
-		mt7603_irq_enable(dev, MT_INT_TX_DONE_ALL);
+	mt76_txq_schedule_all(&dev->mphy);
 
-	for (i = MT_TXQ_MCU; i >= 0; i--)
-		mt76_queue_tx_cleanup(dev, i, false);
-
-	mt7603_mac_sta_poll(dev);
-
-	tasklet_schedule(&dev->mt76.tx_tasklet);
-
-	return 0;
+	mt7603_irq_enable(dev, MT_INT_TX_DONE_ALL);
 }
 
 int mt7603_dma_init(struct mt7603_dev *dev)
@@ -170,6 +162,8 @@
 
 	mt76_dma_attach(&dev->mt76);
 
+	tasklet_init(&dev->mt76.tx_tasklet, mt7603_tx_tasklet, (unsigned long)dev);
+
 	mt76_clear(dev, MT_WPDMA_GLO_CFG,
 		   MT_WPDMA_GLO_CFG_TX_DMA_EN |
 		   MT_WPDMA_GLO_CFG_RX_DMA_EN |
@@ -218,15 +211,7 @@
 		return ret;
 
 	mt76_wr(dev, MT_DELAY_INT_CFG, 0);
-	ret = mt76_init_queues(dev);
-	if (ret)
-		return ret;
-
-	netif_tx_napi_add(&dev->mt76.napi_dev, &dev->mt76.tx_napi,
-			  mt7603_poll_tx, NAPI_POLL_WEIGHT);
-	napi_enable(&dev->mt76.tx_napi);
-
-	return 0;
+	return mt76_init_queues(dev);
 }
 
 void mt7603_dma_cleanup(struct mt7603_dev *dev)
--- a/mt76x02.h
+++ b/mt76x02.h
@@ -84,6 +84,8 @@
 
 	struct sk_buff *rx_head;
 
+	struct tasklet_struct tx_tasklet;
+	struct tasklet_struct pre_tbtt_tasklet;
 	struct delayed_work cal_work;
 	struct delayed_work wdt_work;
 
--- a/mt76x02_mmio.c
+++ b/mt76x02_mmio.c
@@ -146,33 +146,20 @@
 static void mt76x02_tx_tasklet(unsigned long data)
 {
 	struct mt76x02_dev *dev = (struct mt76x02_dev *)data;
+	int i;
 
-	mt76x02_mac_poll_tx_status(dev, false);
 	mt76x02_process_tx_status_fifo(dev);
 
 	mt76_txq_schedule_all(&dev->mphy);
-}
 
-static int mt76x02_poll_tx(struct napi_struct *napi, int budget)
-{
-	struct mt76x02_dev *dev = container_of(napi, struct mt76x02_dev,
-					       mt76.tx_napi);
-	int i;
-
-	mt76x02_mac_poll_tx_status(dev, false);
-
 	for (i = MT_TXQ_MCU; i >= 0; i--)
 		mt76_queue_tx_cleanup(dev, i, false);
 
-	if (napi_complete_done(napi, 0))
-		mt76x02_irq_enable(dev, MT_INT_TX_DONE_ALL);
-
-	for (i = MT_TXQ_MCU; i >= 0; i--)
-		mt76_queue_tx_cleanup(dev, i, false);
+	mt76x02_mac_poll_tx_status(dev, false);
 
-	tasklet_schedule(&dev->mt76.tx_tasklet);
+	mt76_txq_schedule_all(&dev->mphy);
 
-	return 0;
+	mt76x02_irq_enable(dev, MT_INT_TX_DONE_ALL);
 }
 
 int mt76x02_dma_init(struct mt76x02_dev *dev)
@@ -231,15 +219,7 @@
 	if (ret)
 		return ret;
 
-	ret = mt76_init_queues(dev);
-	if (ret)
-		return ret;
-
-	netif_tx_napi_add(&dev->mt76.napi_dev, &dev->mt76.tx_napi,
-			  mt76x02_poll_tx, NAPI_POLL_WEIGHT);
-	napi_enable(&dev->mt76.tx_napi);
-
-	return 0;
+	return mt76_init_queues(dev);
 }
 EXPORT_SYMBOL_GPL(mt76x02_dma_init);
 
@@ -267,6 +247,11 @@
 
 	intr &= dev->mt76.mmio.irqmask;
 
+	if (intr & MT_INT_TX_DONE_ALL) {
+		mt76x02_irq_disable(dev, MT_INT_TX_DONE_ALL);
+		tasklet_schedule(&dev->mt76.tx_tasklet);
+	}
+
 	if (intr & MT_INT_RX_DONE(0)) {
 		mt76x02_irq_disable(dev, MT_INT_RX_DONE(0));
 		napi_schedule(&dev->mt76.napi[0]);
@@ -288,12 +273,9 @@
 			mt76_queue_kick(dev, dev->mt76.q_tx[MT_TXQ_PSD].q);
 	}
 
-	if (intr & MT_INT_TX_STAT)
+	if (intr & MT_INT_TX_STAT) {
 		mt76x02_mac_poll_tx_status(dev, true);
-
-	if (intr & (MT_INT_TX_STAT | MT_INT_TX_DONE_ALL)) {
-		mt76x02_irq_disable(dev, MT_INT_TX_DONE_ALL);
-		napi_schedule(&dev->mt76.tx_napi);
+		tasklet_schedule(&dev->mt76.tx_tasklet);
 	}
 
 	if (intr & MT_INT_GPTIMER) {
@@ -443,7 +425,6 @@
 
 	tasklet_disable(&dev->mt76.pre_tbtt_tasklet);
 	tasklet_disable(&dev->mt76.tx_tasklet);
-	napi_disable(&dev->mt76.tx_napi);
 
 	for (i = 0; i < ARRAY_SIZE(dev->mt76.napi); i++)
 		napi_disable(&dev->mt76.napi[i]);
@@ -497,8 +478,7 @@
 	clear_bit(MT76_RESET, &dev->mt76.state);
 
 	tasklet_enable(&dev->mt76.tx_tasklet);
-	napi_enable(&dev->mt76.tx_napi);
-	napi_schedule(&dev->mt76.tx_napi);
+	tasklet_schedule(&dev->mt76.tx_tasklet);
 
 	tasklet_enable(&dev->mt76.pre_tbtt_tasklet);
 
