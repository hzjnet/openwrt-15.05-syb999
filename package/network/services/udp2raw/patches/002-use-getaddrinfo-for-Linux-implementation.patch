From ddc5acf34421e021f665d92f06ca09d29bd000fc Mon Sep 17 00:00:00 2001
From: HiGarfield <HiGarfield@126.com>
Date: Sat, 12 Feb 2022 03:10:58 +0800
Subject: [PATCH] use getaddrinfo() for Linux implementation

simplify implementation and support hostname as address

Note: do not use static linking in compilation since this commit,
since getaddrinfo() causes problems with static linking.
Ref:
[1] https://stackoverflow.com/questions/2725255/create-statically-linked-binary-that-uses-getaddrinfo
[2] https://www.linuxquestions.org/questions/programming-9/glibc-warning-concerning-use-of-getaddrinfo-in-static-library-734169
---
 common.cpp | 41 +++++++++++++++++++++++++++++++++++++++++
 1 file changed, 41 insertions(+)

diff --git a/common.cpp b/common.cpp
index 138d41e..161a467 100644
--- a/common.cpp
+++ b/common.cpp
@@ -12,11 +12,39 @@
 #include <random>
 #include <cmath>

+#ifdef UDP2RAW_LINUX
+#include <netdb.h>
+#endif
+
 //static int random_number_fd=-1;
 int force_socket_buf=0;

 int address_t::from_str(char *str)
 {
+#ifdef UDP2RAW_LINUX
+	char ip_addr_str[100];
+	mylog(log_info, "parsing address: %s\n", str);
+	char *pos = strrchr(str, ':');
+	if (!pos)
+	{
+		mylog(log_error,
+			  "failed to parse: %s, the format addr:port is required\n",
+			  str);
+		myexit(-1);
+	}
+	memset(ip_addr_str, 0, sizeof(ip_addr_str));
+	strncpy(ip_addr_str, str, pos - str);
+	struct addrinfo *res;
+	int ret = getaddrinfo(ip_addr_str, pos + 1, NULL, &res);
+	if (ret < 0)
+	{
+		mylog(log_error, "failed to parse: %s, %s\n",
+			  str, gai_strerror(ret));
+		myexit(-1);
+	}
+	memcpy(&inner, res->ai_addr, sizeof(*(res->ai_addr)));
+	freeaddrinfo(res);
+#else
 	clear();

 	char ip_addr_str[100];u32_t port;
@@ -87,12 +115,24 @@ int address_t::from_str(char *str)
 			myexit(-1);
 		}
 	}
+#endif

 	return 0;
 }

 int address_t::from_str_ip_only(char * str)
 {
+#ifdef UDP2RAW_LINUX
+	struct addrinfo *res;
+	int ret = getaddrinfo(str, NULL, NULL, &res);
+	if (ret < 0)
+	{
+		mylog(log_error, "invalid addr: %s, %s\n",
+			  str, gai_strerror(ret));
+		myexit(-1);
+	}
+	memcpy(&inner, res->ai_addr, sizeof(*(res->ai_addr)));
+#else
 	clear();

 	u32_t type;
@@ -128,6 +168,7 @@ int address_t::from_str_ip_only(char * str)
 		mylog(log_error,"ip_addr %s is invalid, %d\n",str,ret);
 		myexit(-1);
 	}
+#endif
 	return 0;
 }

-- 
2.25.1

